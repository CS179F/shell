g++ -ggdb -std=c++0x -lreadline -pthread myshell.cc thread.h Devices.h -o shell
In file included from myshell.cc:20:0:
Devices.h:116:0: warning: "EXCLUSION" redefined [enabled by default]
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
 ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:31:0: note: this is the location of the previous definition
 #define EXCLUSION Sentry exclusion(this); exclusion.touch();
 ^
thread.h:22:15: error: redefinition of ‘template<class T> std::string T2a(T)’
 inline string T2a( T x ) { ostringstream s; s<<x; return s.str(); }
               ^
In file included from myshell.cc:19:0:
thread.h:22:15: error: ‘template<class T> std::string T2a(T)’ previously declared here
 inline string T2a( T x ) { ostringstream s; s<<x; return s.str(); }
               ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:25:15: error: redefinition of ‘template<class T> std::string id(T)’
 inline string id( T x ) { return T2a( x ); }
               ^
In file included from myshell.cc:19:0:
thread.h:25:15: error: ‘template<class T> std::string id(T)’ previously declared here
 inline string id( T x ) { return T2a( x ); }
               ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:27:6: error: redefinition of ‘bool CDBG_IS_ON’
 bool CDBG_IS_ON = false;  // false - Turns off CDBG output ;  true - Turns on CDBG input
      ^
In file included from myshell.cc:19:0:
thread.h:27:6: error: ‘bool CDBG_IS_ON’ previously defined here
 bool CDBG_IS_ON = false;  // false - Turns off CDBG output ;  true - Turns on CDBG input
      ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:28:6: error: redefinition of ‘bool PRINT_QUEUE_ON’
 bool PRINT_QUEUE_ON = false;
      ^
In file included from myshell.cc:19:0:
thread.h:28:6: error: ‘bool PRINT_QUEUE_ON’ previously defined here
 bool PRINT_QUEUE_ON = false;
      ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:47:6: error: redefinition of ‘template<class T> bool operator<(const std::pair<std::pair<int, int>, T>&, const std::pair<std::pair<int, int>, T>&)’
 bool operator<( const pair<pair<int,int>,T>& a, 
      ^
In file included from myshell.cc:19:0:
thread.h:47:6: error: ‘template<class T> bool operator<(const std::pair<std::pair<int, int>, T>&, const std::pair<std::pair<int, int>, T>&)’ previously declared here
 bool operator<( const pair<pair<int,int>,T>& a, 
      ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:56:7: error: redefinition of ‘class pQueue<T>’
 class pQueue {
       ^
In file included from myshell.cc:19:0:
thread.h:56:7: error: previous definition of ‘class pQueue<T>’
 class pQueue {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:72:7: error: redefinition of ‘class InterruptSystem’
 class InterruptSystem {
       ^
In file included from myshell.cc:19:0:
thread.h:72:7: error: previous definition of ‘class InterruptSystem’
 class InterruptSystem {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:108:27: error: redefinition of ‘sigset_t InterruptSystem::on’
 sigset_t InterruptSystem::on;   
                           ^
In file included from myshell.cc:19:0:
thread.h:108:10: error: ‘sigset_t InterruptSystem::on’ previously declared here
 sigset_t InterruptSystem::on;   
          ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:109:27: error: redefinition of ‘sigset_t InterruptSystem::alrmoff’
 sigset_t InterruptSystem::alrmoff; 
                           ^
In file included from myshell.cc:19:0:
thread.h:109:10: error: ‘sigset_t InterruptSystem::alrmoff’ previously declared here
 sigset_t InterruptSystem::alrmoff; 
          ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:110:27: error: redefinition of ‘sigset_t InterruptSystem::alloff’
 sigset_t InterruptSystem::alloff;  
                           ^
In file included from myshell.cc:19:0:
thread.h:110:10: error: ‘sigset_t InterruptSystem::alloff’ previously declared here
 sigset_t InterruptSystem::alloff;  
          ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:112:17: error: redefinition of ‘InterruptSystem interrupts’
 InterruptSystem interrupts;               // singleton instance.
                 ^
In file included from myshell.cc:19:0:
thread.h:112:17: error: ‘InterruptSystem interrupts’ previously declared here
 InterruptSystem interrupts;               // singleton instance.
                 ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:131:7: error: redefinition of ‘class Semaphore’
 class Semaphore {
       ^
In file included from myshell.cc:19:0:
thread.h:131:7: error: previous definition of ‘class Semaphore’
 class Semaphore {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:152:7: error: redefinition of ‘class Lock’
 class Lock : public Semaphore {
       ^
In file included from myshell.cc:19:0:
thread.h:152:7: error: previous definition of ‘class Lock’
 class Lock : public Semaphore {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:158:7: error: redefinition of ‘class Monitor’
 class Monitor : Lock {
       ^
In file included from myshell.cc:19:0:
thread.h:158:7: error: previous definition of ‘class Monitor’
 class Monitor : Lock {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:171:7: error: redefinition of ‘class Sentry’
 class Sentry {            // An autoreleaser for monitor's lock.
       ^
In file included from myshell.cc:19:0:
thread.h:171:7: error: previous definition of ‘class Sentry’
 class Sentry {            // An autoreleaser for monitor's lock.
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:189:7: error: redefinition of ‘class ThreadSafeMap<T1, T2>’
 class ThreadSafeMap : Monitor {
       ^
In file included from myshell.cc:19:0:
thread.h:189:7: error: previous definition of ‘class ThreadSafeMap<T1, T2>’
 class ThreadSafeMap : Monitor {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:199:7: error: redefinition of ‘class Thread’
 class Thread {
       ^
In file included from myshell.cc:19:0:
thread.h:199:7: error: previous definition of ‘class Thread’
 class Thread {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:273:7: error: redefinition of ‘class Condition’
 class Condition : pQueue< Thread* > {
       ^
In file included from myshell.cc:19:0:
thread.h:273:7: error: previous definition of ‘class Condition’
 class Condition : pQueue< Thread* > {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:294:7: error: redefinition of ‘class AlarmClock’
 class AlarmClock : Monitor {
       ^
In file included from myshell.cc:19:0:
thread.h:294:7: error: previous definition of ‘class AlarmClock’
 class AlarmClock : Monitor {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:442:7: error: redefinition of ‘class CPUallocator’
 class CPUallocator : Monitor {                            
       ^
In file included from myshell.cc:19:0:
thread.h:442:7: error: previous definition of ‘class CPUallocator’
 class CPUallocator : Monitor {                            
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:521:6: error: redefinition of ‘static void InterruptSystem::handler(int)’
 void InterruptSystem::handler(int sig) {                  // static.
      ^
In file included from myshell.cc:19:0:
thread.h:521:6: error: ‘static void InterruptSystem::handler(int)’ previously defined here
 void InterruptSystem::handler(int sig) {                  // static.
      ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:533:6: error: redefinition of ‘void Condition::wait(int)’
 void Condition::wait( int pr ) {
      ^
In file included from myshell.cc:19:0:
thread.h:533:6: error: ‘void Condition::wait(int)’ previously defined here
 void Condition::wait( int pr ) {
      ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:544:7: error: redefinition of ‘class ThreadGraveyard’
 class ThreadGraveyard : Monitor {
       ^
In file included from myshell.cc:19:0:
thread.h:544:7: error: previous definition of ‘class ThreadGraveyard’
 class ThreadGraveyard : Monitor {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:561:18: error: invalid type in declaration before ‘;’ token
 } threadGraveyard;
                  ^
thread.h:561:18: error: conflicting declaration ‘int threadGraveyard’
In file included from myshell.cc:19:0:
thread.h:561:3: error: ‘threadGraveyard’ has a previous declaration as ‘ThreadGraveyard threadGraveyard’
 } threadGraveyard;
   ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:564:7: error: redefinition of ‘static void* Thread::start(Thread*)’
 void* Thread::start(Thread* myself) {                     // static.
       ^
In file included from myshell.cc:19:0:
thread.h:564:7: error: ‘static void* Thread::start(Thread*)’ previously defined here
 void* Thread::start(Thread* myself) {                     // static.
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:602:7: error: redefinition of ‘class InterruptCatcher’
 class InterruptCatcher : Thread {
       ^
In file included from myshell.cc:19:0:
thread.h:602:7: error: previous definition of ‘class InterruptCatcher’
 class InterruptCatcher : Thread {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:620:7: error: redefinition of ‘class Pauser’
 class Pauser {                            // none created so far.
       ^
In file included from myshell.cc:19:0:
thread.h:620:7: error: previous definition of ‘class Pauser’
 class Pauser {                            // none created so far.
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:633:43: error: redefinition of ‘ThreadSafeMap<std::thread::id, Thread*> Thread::whoami’
 ThreadSafeMap<thread::id,Thread*> Thread::whoami;         // static
                                           ^
In file included from myshell.cc:19:0:
thread.h:633:35: error: ‘ThreadSafeMap<std::thread::id, Thread*> Thread::whoami’ previously declared here
 ThreadSafeMap<thread::id,Thread*> Thread::whoami;         // static
                                   ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:635:37: error: redefinition of ‘InterruptCatcher theInterruptCatcher’
 InterruptCatcher theInterruptCatcher("IntCatcher");  // singleton.
                                     ^
In file included from myshell.cc:19:0:
thread.h:635:18: error: ‘InterruptCatcher theInterruptCatcher’ previously declared here
 InterruptCatcher theInterruptCatcher("IntCatcher");  // singleton.
                  ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:636:12: error: redefinition of ‘AlarmClock dispatcher’
 AlarmClock dispatcher;                         // single instance.
            ^
thread.h:327:19: error: ‘AlarmClock dispatcher’ previously declared here
 extern AlarmClock dispatcher;                  // singleton instance.
                   ^
thread.h:637:17: error: redefinition of ‘CPUallocator CPU’
 CPUallocator CPU(1);                 // single instance, set here.
                 ^
thread.h:518:21: error: ‘CPUallocator CPU’ previously declared here
 extern CPUallocator CPU;  // single instance, init declaration here.
                     ^
thread.h: In function ‘std::string Him(Thread*)’:
thread.h:638:8: error: redefinition of ‘std::string Him(Thread*)’
 string Him( Thread* t ) { 
        ^
In file included from myshell.cc:19:0:
thread.h:638:8: error: ‘std::string Him(Thread*)’ previously defined here
 string Him( Thread* t ) { 
        ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h: At global scope:
thread.h:643:9: error: redefinition of ‘static Thread* Thread::me()’
 Thread* Thread::me() { return whoami[this_thread::get_id()]; }  // static
         ^
In file included from myshell.cc:19:0:
thread.h:643:9: error: ‘static Thread* Thread::me()’ previously defined here
 Thread* Thread::me() { return whoami[this_thread::get_id()]; }  // static
         ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h: In function ‘std::string Me()’:
thread.h:644:8: error: redefinition of ‘std::string Me()’
 string Me() { return Him(Thread::me()); }
        ^
In file included from myshell.cc:19:0:
thread.h:644:8: error: ‘std::string Me()’ previously defined here
 string Me() { return Him(Thread::me()); }
        ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h: In function ‘std::string report()’:
thread.h:651:8: error: redefinition of ‘std::string report()’
 string report() {               
        ^
In file included from myshell.cc:19:0:
thread.h:651:8: error: ‘std::string report()’ previously defined here
 string report() {               
        ^
thread.h:447:7: error: ‘int CPUallocator::cpu_count’ is private
   int cpu_count;           // count of unallocated (i.e., free) CPUs.
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:655:27: error: within this context
   s << Me() << "/" << CPU.cpu_count << "/" << CPU.ready.size() << "/" 
                           ^
In file included from myshell.cc:19:0:
thread.h:446:19: error: ‘pQueue<Thread*> CPUallocator::ready’ is private
   pQueue<Thread*> ready;       // queue of Threads waiting for a CPU.
                   ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:655:51: error: within this context
   s << Me() << "/" << CPU.cpu_count << "/" << CPU.ready.size() << "/" 
                                                   ^
In file included from myshell.cc:19:0:
thread.h:446:19: error: ‘pQueue<Thread*> CPUallocator::ready’ is private
   pQueue<Thread*> ready;       // queue of Threads waiting for a CPU.
                   ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:656:13: error: within this context
     << (CPU.ready.empty() ? "none" : Him(CPU.ready.front())) << ": ";
             ^
In file included from myshell.cc:19:0:
thread.h:446:19: error: ‘pQueue<Thread*> CPUallocator::ready’ is private
   pQueue<Thread*> ready;       // queue of Threads waiting for a CPU.
                   ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:656:46: error: within this context
     << (CPU.ready.empty() ? "none" : Him(CPU.ready.front())) << ": ";
                                              ^
thread.h: At global scope:
thread.h:673:7: error: redefinition of ‘class SharableInteger’
 class SharableInteger: public Monitor {
       ^
In file included from myshell.cc:19:0:
thread.h:673:7: error: previous definition of ‘class SharableInteger’
 class SharableInteger: public Monitor {
       ^
In file included from Devices.h:32:0,
                 from myshell.cc:20:
thread.h:685:10: error: invalid type in declaration before ‘;’ token
 } counter;                                        // single instance
          ^
thread.h:685:10: error: conflicting declaration ‘int counter’
In file included from myshell.cc:19:0:
thread.h:685:3: error: ‘counter’ has a previous declaration as ‘SharableInteger counter’
 } counter;                                        // single instance
   ^
In file included from myshell.cc:20:0:
Devices.h:81:17: error: redefinition of ‘InterruptSystem interrupts’
 InterruptSystem interrupts;               // singleton instance.
                 ^
In file included from myshell.cc:19:0:
thread.h:112:17: error: ‘InterruptSystem interrupts’ previously declared here
 InterruptSystem interrupts;               // singleton instance.
                 ^
In file included from myshell.cc:20:0:
Devices.h:88:7: error: redefinition of ‘class Monitor’
 class Monitor : public mutex {
       ^
In file included from myshell.cc:19:0:
thread.h:158:7: error: previous definition of ‘class Monitor’
 class Monitor : Lock {
       ^
In file included from myshell.cc:20:0:
Devices.h:98:7: error: redefinition of ‘class Sentry’
 class Sentry {  // To automatically block and restore interrupts.
       ^
In file included from myshell.cc:19:0:
thread.h:171:7: error: previous definition of ‘class Sentry’
 class Sentry {            // An autoreleaser for monitor's lock.
       ^
In file included from myshell.cc:20:0:
Devices.h:122:7: error: redefinition of ‘class Semaphore’
 class Semaphore : public Monitor {  // A signal-safe implementation 
       ^
In file included from myshell.cc:19:0:
thread.h:131:7: error: previous definition of ‘class Semaphore’
 class Semaphore {
       ^
In file included from myshell.cc:20:0:
Devices.h: In member function ‘int iDevice<Item>::input(Item*, int)’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:118:27: error: no matching function for call to ‘std::condition_variable::wait(int&)’
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
Devices.h:118:27: note: candidates are:
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
In file included from thread.h:15:0,
                 from myshell.cc:19:
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note: void std::condition_variable::wait(std::unique_lock<std::mutex>&)
     wait(unique_lock<mutex>& __lock);
     ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note:   no known conversion for argument 1 from ‘int’ to ‘std::unique_lock<std::mutex>&’
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note: template<class _Predicate> void std::condition_variable::wait(std::unique_lock<std::mutex>&, _Predicate)
       wait(unique_lock<mutex>& __lock, _Predicate __p)
       ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note:   template argument deduction/substitution failed:
In file included from myshell.cc:20:0:
Devices.h:118:27: note:   cannot convert ‘lck’ (type ‘int’) to type ‘std::unique_lock<std::mutex>&’
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
Devices.h: In member function ‘void iDevice<Item>::completeRead()’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h: In member function ‘int oDevice<Item>::output(Item*, int)’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:118:27: error: no matching function for call to ‘std::condition_variable::wait(int&)’
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
Devices.h:118:27: note: candidates are:
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
In file included from thread.h:15:0,
                 from myshell.cc:19:
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note: void std::condition_variable::wait(std::unique_lock<std::mutex>&)
     wait(unique_lock<mutex>& __lock);
     ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note:   no known conversion for argument 1 from ‘int’ to ‘std::unique_lock<std::mutex>&’
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note: template<class _Predicate> void std::condition_variable::wait(std::unique_lock<std::mutex>&, _Predicate)
       wait(unique_lock<mutex>& __lock, _Predicate __p)
       ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note:   template argument deduction/substitution failed:
In file included from myshell.cc:20:0:
Devices.h:118:27: note:   cannot convert ‘lck’ (type ‘int’) to type ‘std::unique_lock<std::mutex>&’
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
Devices.h: In member function ‘void oDevice<Item>::completeWrite()’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
myshell.cc: In function ‘int main(int, char**)’:
myshell.cc:235:34: error: declaration of C function ‘int main(int, char**)’ conflicts with
 int main( int argc, char* argv[] ) {
                                  ^
In file included from myshell.cc:20:0:
Devices.h:252:5: error: previous declaration ‘int main()’ here
 int main() {}  // Just to make this file compile.
     ^
Devices.h: In instantiation of ‘void iDevice<Item>::completeRead() [with Item = char]’:
Devices.h:242:22:   required from here
Devices.h:116:75: error: cannot convert ‘iDevice<char>’ to ‘int’ in initialization
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                           ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h: In instantiation of ‘void oDevice<Item>::completeWrite() [with Item = char]’:
Devices.h:248:23:   required from here
Devices.h:116:75: error: cannot convert ‘oDevice<char>’ to ‘int’ in initialization
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                           ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:0: warning: "EXCLUSION" redefined [enabled by default]
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
 ^
In file included from Devices.h:32:0:
thread.h:31:0: note: this is the location of the previous definition
 #define EXCLUSION Sentry exclusion(this); exclusion.touch();
 ^
Devices.h:81:17: error: redefinition of ‘InterruptSystem interrupts’
 InterruptSystem interrupts;               // singleton instance.
                 ^
In file included from Devices.h:32:0:
thread.h:112:17: error: ‘InterruptSystem interrupts’ previously declared here
 InterruptSystem interrupts;               // singleton instance.
                 ^
Devices.h:88:7: error: redefinition of ‘class Monitor’
 class Monitor : public mutex {
       ^
In file included from Devices.h:32:0:
thread.h:158:7: error: previous definition of ‘class Monitor’
 class Monitor : Lock {
       ^
Devices.h:98:7: error: redefinition of ‘class Sentry’
 class Sentry {  // To automatically block and restore interrupts.
       ^
In file included from Devices.h:32:0:
thread.h:171:7: error: previous definition of ‘class Sentry’
 class Sentry {            // An autoreleaser for monitor's lock.
       ^
Devices.h:122:7: error: redefinition of ‘class Semaphore’
 class Semaphore : public Monitor {  // A signal-safe implementation 
       ^
In file included from Devices.h:32:0:
thread.h:131:7: error: previous definition of ‘class Semaphore’
 class Semaphore {
       ^
Devices.h: In member function ‘int iDevice<Item>::input(Item*, int)’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:162:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:118:27: error: no matching function for call to ‘std::condition_variable::wait(int&)’
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
Devices.h:118:27: note: candidates are:
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
In file included from Devices.h:23:0:
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note: void std::condition_variable::wait(std::unique_lock<std::mutex>&)
     wait(unique_lock<mutex>& __lock);
     ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note:   no known conversion for argument 1 from ‘int’ to ‘std::unique_lock<std::mutex>&’
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note: template<class _Predicate> void std::condition_variable::wait(std::unique_lock<std::mutex>&, _Predicate)
       wait(unique_lock<mutex>& __lock, _Predicate __p)
       ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note:   template argument deduction/substitution failed:
Devices.h:118:27: note:   cannot convert ‘lck’ (type ‘int’) to type ‘std::unique_lock<std::mutex>&’
 #define WAIT      wait(lck)
                           ^
Devices.h:170:40: note: in expansion of macro ‘WAIT’
       while( ! readCompleted ) ok2read.WAIT;
                                        ^
Devices.h: In member function ‘void iDevice<Item>::completeRead()’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:176:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h: In member function ‘int oDevice<Item>::output(Item*, int)’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:199:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:118:27: error: no matching function for call to ‘std::condition_variable::wait(int&)’
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
Devices.h:118:27: note: candidates are:
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
In file included from Devices.h:23:0:
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note: void std::condition_variable::wait(std::unique_lock<std::mutex>&)
     wait(unique_lock<mutex>& __lock);
     ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:86:5: note:   no known conversion for argument 1 from ‘int’ to ‘std::unique_lock<std::mutex>&’
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note: template<class _Predicate> void std::condition_variable::wait(std::unique_lock<std::mutex>&, _Predicate)
       wait(unique_lock<mutex>& __lock, _Predicate __p)
       ^
/opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/condition_variable:90:7: note:   template argument deduction/substitution failed:
Devices.h:118:27: note:   cannot convert ‘lck’ (type ‘int’) to type ‘std::unique_lock<std::mutex>&’
 #define WAIT      wait(lck)
                           ^
Devices.h:207:42: note: in expansion of macro ‘WAIT’
       while( ! writeCompleted ) ok2write.WAIT;
                                          ^
Devices.h: In member function ‘void oDevice<Item>::completeWrite()’:
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:50: error: ‘mutex’ is not a member of ‘Monitor’
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                  ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:64: error: template argument 1 is invalid
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
Devices.h:116:69: error: invalid type in declaration before ‘(’ token
 #define EXCLUSION Sentry snt_(this); unique_lock<Monitor::mutex> lck(*this);
                                                                     ^
Devices.h:213:5: note: in expansion of macro ‘EXCLUSION’
     EXCLUSION
     ^
make: *** [shell] Error 1
